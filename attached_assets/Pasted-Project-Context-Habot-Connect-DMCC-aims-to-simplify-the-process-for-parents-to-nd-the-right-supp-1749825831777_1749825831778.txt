Project Context:
Habot Connect DMCC aims to simplify the process for parents to
nd the right
support for children with learning di
culties. For this project, you will develop a small,
focused module of our pla
orm: a simpli
ed "Learning Support Provider Directory."
This module will allow parents to browse a list of learning support providers and view
detailed information about a speci
c provider.
This project is designed to assess your practical skills in React development, UI/UX
implementation, API integration, and code quality, which are crucial for our remote,
performance-driven environment.
Instructions to Complete the Project:
1. Project Setup:
○ Initialize a new React application using create-react-app, Vite, or Next.js (if
you prefer SSR).
○ Use a modern JavaScript (ES6+) and React (Hooks-based) approach.
TypeScript is a plus but not mandatory for this project.
○ Set up your project with a basic component structure.
2. Data Simulation (API Integration):
○ Instead of a real backend, simulate an API call. You can:
■ Create a local data.json
le with an array of at least 5-7 dummy learning
support provider objects. Each object should include
elds like: id, name,
specialization (e.g., "Dyslexia Support", "ADHD Coaching"), location
(city/area), rating (1-5), shortDescription, longDescription, contactEmail,
phoneNumber.
■ Simulate an asynchronous fetch operation (e.g., using setTimeout within a
function that returns a Promise) to load this data, mimicking an actual API
call.
○ Ensure your application fetches this data for both the listing and individual
detail views.
3. Provider Listing Page (/ or /providers):
○ Display a list of all learning support providers.
○ For each provider in the list, display their name, specialization, location, and
rating.
○ Each provider entry should be clickable and navigate to a detailed view of that
provider.
○ The list should be responsive and visually appealing across di
erent screen
sizes (mobile, tablet, desktop).
○ Implement a simple search/
lter functionality based on name or specialization
(e.g., an input
eld that
lters the list dynamically as the user types).
4. Provider Detail Page (/providers/:id):
○ When a user clicks on a provider from the list, they should be navigated to a
dedicated page for that provider (e.g., /providers/123).
○ This page should display all available details for the selected provider (e.g.,
name, specialization, location, rating, longDescription, contactEmail,
phoneNumber).
○ Include a "Back to List" bu
on or similar navigation to return to the main
provider listing.
5. UI/UX Considerations:
○ Pay a
ention to visual design, layout, and user experience.
○ Ensure the application is easy to navigate and aesthetically pleasing.
○ Use basic styling (CSS Modules, Styled Components, Tailwind CSS, or plain
CSS) to make the UI presentable.
○ Implement basic error handling (e.g., what happens if a provider with a given
ID is not found on the detail page).
6. Code Quality & Best Practices:
○ Write clean, readable, and well-structured code.
○ Break down your application into reusable React components.
○ Use appropriate state management (React Hooks, Context API).
○ Include meaningful comments where necessary.
○ Ensure your code is maintainable.
7. Version Control & Submission:
○ Initialize a Git repository for your project.
○ Make regular, atomic commits with clear commit messages.
○ Push your completed project to a public GitHub (or similar) repository.
○ Provide clear instructions in the README.md
le on how to set up and run
your application locally.